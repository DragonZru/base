server.port=8080
spring.application.name=base

debugMsg.enable=false

# pagehelper分页
pagehelper.helperDialect=mysql
# 默认查询总数, if false-> "total":-1
pagehelper.defaultCount=true

# spring flyway
spring.flyway.enabled=false
spring.flyway.url=jdbc:mysql://127.0.0.1:13306
spring.flyway.user=root
spring.flyway.password=123456
spring.flyway.schemas=example

# redis cluster
spring.data.redis.cluster.nodes[0]=127.0.0.1:6371
spring.data.redis.cluster.nodes[1]=127.0.0.1:6372
spring.data.redis.cluster.nodes[2]=127.0.0.1:6373

# datasource
#spring.datasource.url=jdbc:mysql://127.0.0.1:13306/example0?useUnicode=true&useJDBCCompliantTimezoneShift=true&serverTimezone=Asia/Shanghai
#spring.datasource.username=root
#spring.datasource.password=123456
#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.hikari.connection-init-sql=SELECT 1

#spring.datasource.driver-class-name=org.apache.shardingsphere.driver.ShardingSphereDriver
## 指定 YAML 配置文件
#spring.datasource.url=jdbc:shardingsphere:classpath:shardingsphere.yaml

# shardingsphere
## Memory,Standalone,Cluster
spring.shardingsphere.mode.type=Standalone
spring.shardingsphere.mode.repository.type=JDBC

spring.shardingsphere.props.sql-show=true

spring.shardingsphere.datasource.names=ds0,ds1

spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://127.0.0.1:13306/example0?useUnicode=true&useJDBCCompliantTimezoneShift=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://127.0.0.1:13306/example1?useUnicode=true&useJDBCCompliantTimezoneShift=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

spring.shardingsphere.rules.sharding.tables.t_example_item.actual-data-nodes=ds${0..1}.t_example_item_${0..9}

# 分库策略 standard, complex, hint
spring.shardingsphere.rules.sharding.tables.t_example_item.database-strategy.standard.sharding-column=example_id
spring.shardingsphere.rules.sharding.tables.t_example_item.database-strategy.standard.sharding-algorithm-name=database_inline
# 分表策略，同分库策略
spring.shardingsphere.rules.sharding.tables.t_example_item.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.t_example_item.table-strategy.standard.sharding-algorithm-name=t_example_item_inline
#spring.shardingsphere.rules.sharding.tables.t_example_item.table-strategy.standard.complex-algorithm-class-name=com.ylli.api.config.shardingsphere.ExampleComplexKeysShardingAlgorithm

# 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.database_inline.props.algorithm-expression=ds${example_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.t_example_item_inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t_example_item_inline.props.algorithm-expression=t_example_item_${id % 10}

# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.t_example_item.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_example_item.key-generate-strategy.key-generator-name=customKeyGenerator
# 分布式序列算法配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.customKeyGenerator.type=CustomIdGenerator

# 广播表
spring.shardingsphere.rules.sharding.broadcast-tables[0]=t_example